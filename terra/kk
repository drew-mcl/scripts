// src/main/kotlin/com/example/MultiJvmPlugin.kt
package com.example

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.plugins.JavaPluginExtension
import org.gradle.api.tasks.bundling.Jar
import org.gradle.jvm.toolchain.JavaLanguageVersion

class MultiJvmPlugin : Plugin<Project> {
    override fun apply(project: Project) = project.run {
        // always need the Java plugin
        pluginManager.apply("java")

        val javaExt = extensions.getByType(JavaPluginExtension::class.java)

        // ### 1. Pick the target version
        val target = determineTargetVersion(name)      // 8 or 17
        javaExt.toolchain.languageVersion.set(JavaLanguageVersion.of(target))

        // ### 2. OPTIONAL: build an extra “java8” jar even if the project itself targets 17
        if (target == 17) createExtraJava8Jar(javaExt)
    }

    /** Parse “…-java-8” or read gradle.property `targetJava` (your choice). */
    private fun Project.determineTargetVersion(moduleName: String): Int =
        Regex("java[-.]?(\\d+)").find(moduleName)?.groupValues?.get(1)?.toInt()
            ?: findProperty("targetJava")?.toString()?.toInt()
            ?: 17                                    // default

    /** Compile the same sources again with --release 8 and publish *-java8.jar*. */
    private fun Project.createExtraJava8Jar(javaExt: JavaPluginExtension) {
        val java8Spec = javaToolchains.compilerFor {
            languageVersion.set(JavaLanguageVersion.of(8))
        }

        val compileJava8 = tasks.register("compileJava8", org.gradle.api.tasks.compile.JavaCompile::class.java) {
            destinationDirectory.set(layout.buildDirectory.dir("classes/java8"))
            classpath = javaExt.sourceSets.getByName("main").compileClasspath
            source = javaExt.sourceSets.getByName("main").allJava
            javaCompiler.set(java8Spec)
            options.release.set(8)
        }

        tasks.register("jarJava8", Jar::class.java) {
            dependsOn(compileJava8)
            from(compileJava8)
            archiveClassifier.set("java8")
        }
        // makes it visible to `publish` or `maven-publish` if you use them
        artifacts.add("archives", tasks.named("jarJava8"))
    }
}